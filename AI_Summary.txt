# SyncLyrics App Summary

This application fetches and displays synchronized lyrics for currently playing songs. It supports multiple providers (like Spotify, Windows Media, and others) and offers various customization options (themes, animation styles, etc.).  The app uses a server-client architecture, with the server handling lyric fetching and the client (likely a web interface) displaying them.

# File Summaries

## config.py

This file centralizes all the configurable settings for the SyncLyrics application. It uses environment variables (loaded from a .env file) and defines several helper functions to access these settings with appropriate defaults.

**Key Configurations:**

* **Media Sources:** Defines the supported media sources (Spotify, Windows Media, Gnome) with their enabled status and priority.
* **Paths and Directories:** Sets up important paths for resources, database, and cache.
* **Server Configuration:**  Configures server settings like port, host, secret key, and debug mode.
* **UI and Display Settings:**  Manages UI themes, animation styles, background styles, and minimal mode settings.
* **Lyrics Configuration:**  Controls how lyrics are displayed, including buffer size, update interval, and latency compensation.
* **Lyrics Providers:**  Contains settings for each lyrics provider (e.g., Spotify, LrcLib, NetEase), including API keys, URLs, timeouts, and caching.
* **Storage:**  Configures local storage for lyrics and cache, including maximum size and cleanup thresholds.
* **Notifications:**  Manages notification settings like enabled status, duration, and icon path.
* **System-Specific Settings:**  Handles system-level settings for Windows (media session) and Linux (gsettings, playerctl).
* **Development and Debug Settings:**  Controls debug logging, log levels, and performance logging.
* **Feature Flags:**  Enables or disables specific features like minimal UI, local lyrics saving, and parallel provider fetching.

**Helper Functions:**

* `get_env(key, default=None)`: Retrieves an environment variable with a default value.
* `get_env_bool(key, default=False)`: Retrieves a boolean environment variable.
* `get_env_int(key, default=0)`: Retrieves an integer environment variable.
* `get_provider_config(name)`: Returns the configuration for a specific lyrics provider.
* `is_provider_enabled(name)`: Checks if a given provider is enabled.
* `get_provider_priority(name)`: Returns the priority of a given provider.


## lyrics.py

This file manages the fetching and synchronization of lyrics. It initializes lyric providers, fetches lyrics from them, and handles the logic for displaying the correct lyric based on the song's current position.

**Key Functionality:**

* **Provider Initialization:** Creates instances of different lyric providers (LrcLib, NetEase, SpotifyLyrics).
* **Lyric Fetching:** The `_get_lyrics` function tries each provider in order of priority until lyrics are found.
* **Lyric Synchronization:** The `_find_current_lyric_index` function determines the current lyric index based on the song's position and latency compensation.  It handles special cases like being before the first lyric, after the last lyric, or during instrumental breaks.
* **Lyric Retrieval:** The `get_timed_lyrics` function returns the current lyric.
* **Contextual Lyrics:** The `get_timed_lyrics_previous_and_next` function returns a tuple of lyrics, providing context by including previous and next lines. It also handles special cases like the beginning and end of the song, and instrumental sections.

**Global Variables:**

* `current_song_data`: Stores metadata about the currently playing song.
* `current_song_lyrics`: Stores the fetched lyrics for the current song.

**Functions:**

* `_update_song()`: Updates the `current_song_data` and `current_song_lyrics` globals.
* `_get_lyrics(artist, title)`: Fetches lyrics using available providers.
* `_find_current_lyric_index(delta=LATENCY_COMPENSATION)`: Finds the index of the current lyric based on the song's position.
* `get_timed_lyrics(delta=0)`: Returns the current lyric.
* `get_timed_lyrics_previous_and_next()`: Returns a tuple of lyrics (previous, current, next).



## server.py

This file sets up the Flask web server for the SyncLyrics application. It defines routes for serving the web interface, handling settings, fetching lyrics, and managing the application state.

**Key Functionality:**

* **Flask App Setup:** Initializes the Flask app and configures templates and static files.
* **Routing:** Defines various routes for different functionalities:
    * `/`: Serves the main index page.
    * `/settings`: Handles the settings page, allowing users to change and save settings.
    * `/lyrics`: Provides an endpoint for fetching the current lyrics and color data.
    * `/reset-defaults`: Resets the application settings to default values.
    * `/config`: Returns client-side configuration like update interval.
    * `/exit-application`: Provides an endpoint to close the application.
* **State Management:** Uses the `state_manager` module to handle persistent application state.
* **Templating:** Uses Jinja2 templates for rendering the web pages.
* **Error Handling:** Includes basic error handling for cases like lyrics not found.

**Helper Functions:**

* `guess_value_type(value)`: Attempts to determine the data type of a given value (boolean, integer, string).
* `theme()`: A context processor that makes the current theme available to all templates.



## state_manager.py

This file manages the persistent state of the SyncLyrics application. It uses a JSON file to store the state, allowing settings to be preserved between sessions. It also provides helper functions for accessing and modifying the state using JavaScript-like dot notation.

**Key Functionality:**

* **State Storage:** Stores the application state in a `state.json` file.
* **State Manipulation:** Provides functions to get, set, and reset the application state.
* **Dot Notation Access:** Offers functions (`set_attribute_js_notation`, `get_attribute_js_notation`) to access and modify nested state attributes using dot notation (e.g., "representationMethods.terminal").
* **Memory Caching:** Implements a memory cache to reduce disk reads.

**Functions:**

* `reset_state()`: Resets the state to default values.
* `set_state(new_state)`: Sets the application state.
* `get_state()`: Retrieves the current application state.
* `set_attribute_js_notation(state, attribute, value)`: Sets a state attribute using dot notation.
* `get_attribute_js_notation(state, attribute)`: Retrieves a state attribute using dot notation.



## sync_lyrics.py

This file is the main entry point for the SyncLyrics application. It starts the tray icon, the Flask server, and the main lyric synchronization loop.

**Key Functionality:**

* **Tray Icon:** Creates a system tray icon with options to open lyrics, settings, and quit the application.
* **Flask Server:** Starts the Flask web server in a separate thread.
* **Lyric Synchronization Loop:** Continuously fetches and displays lyrics in the terminal.
* **Graceful Exit:** Handles keyboard interrupts and tray icon quit signals to exit the application cleanly.

**Functions:**

* `run_tray()`: Runs the system tray icon.
* `run_server()`: Runs the Flask web server.
* `main()`: The main function that orchestrates the application's components.



## resources/js/lyrics.js

This client-side JavaScript file handles updating the webpage with the current lyrics and background colors. It fetches data from the server and updates the DOM elements accordingly.

**Key Functionality:**

* **Configuration Fetching:** Retrieves configuration data from the server, including the update interval.
* **Lyric Fetching:** Fetches lyrics data from the server at regular intervals.
* **Background Update:** Updates the background color based on data received from the server.  This allows for dynamic theming based on the current song.
* **DOM Manipulation:** Updates specific DOM elements with the fetched lyrics, handling cases where lyrics are not found.  It also minimizes DOM updates by only changing the text content if it has changed.
* **Update Throttling:** Implements a simple mechanism to prevent excessive DOM updates by setting a timeout after each update.

**Functions:**

* `getConfig()`: Fetches configuration from the server.
* `sleep(ms)`: A helper function to pause execution for a specified number of milliseconds.
* `getLyrics()`: Fetches lyrics data from the server.
* `areLyricsDifferent(oldLyrics, newLyrics)`: Checks if the new lyrics are different from the previous ones.
* `updateBackgroundColors(colors)`: Updates the background with the given colors.
* `updateLyricElement(element, text)`: Updates a specific DOM element with the given text.
* `setLyricsInDom(lyrics)`: Sets the lyrics in the DOM, handling cases where lyrics are not found.
* `main()`: The main function that initializes the update loop.



## providers/lrclib.py

This file implements the `LRCLIBProvider` class, which fetches synchronized lyrics from the LRCLIB API.

**Key Functionality:**

* **API Interaction:** Makes requests to the LRCLIB API to retrieve lyrics data.  It handles both precise searches using artist, title, and optional album/duration, as well as general searches.  It prioritizes precise matches and falls back to general searches if necessary.
* **Error Handling:** Includes error handling for API requests and cases where no lyrics are found.
* **Lyric Processing:** Processes the raw lyric data from the API into a standardized format of (timestamp, lyric) tuples.  This ensures consistency across different providers.
* **Custom Headers:** Sets custom headers in API requests to identify the client application.


**Functions:**

* `get_lyrics(artist, title, album=None, duration=None)`: Fetches lyrics from the LRCLIB API.
